# -*- python -*-

import ackward as akw

def classDef():
    c = akw.Class(name='Time',
                  wrapped_class='datetime.time')

    akw.Constructor(
        cls=c,
        signature=[('unsigned int', 'hour'),
                   ('unsigned int', 'minute', '0'),
                   ('unsigned int', 'second', '0'),
                   ('unsigned int', 'microsecond', '0'),
                   #[, tzinfo]]]])
                   ])

    akw.ClassProperty(
        cls=c,
        name='min',
        type='Time',
        read_only=True)


    akw.ClassProperty(
        cls=c,
        name='max',
        type='Time',
        read_only=True)

    akw.ClassProperty(
        cls=c,
        name='resolution',
        type='TimeDelta',
        read_only=True)

    akw.Property(
        cls=c,
        name='hour',
        type='unsigned int',
        read_only=True)

    akw.Property(
        cls=c,
        name='minute',
        type='unsigned int',
        read_only=True)

    akw.Property(
        cls=c,
        name='second',
        type='unsigned int',
        read_only=True)

    akw.Property(
        cls=c,
        name='microsecond',
        type='unsigned int',
        read_only=True)

    # TODO:
    # time.tzinfo
    # The object passed as the tzinfo argument to the time
    # constructor, or None if none was passed.

# Instance methods:

    akw.Method(
        cls=c,
        name='_replace',
        python_name='replace',
        return_type='Time',
        signature=[('unsigned int', 'hour'),
                   ('unsigned int', 'minute'),
                   ('unsigned int', 'second'),
                   ('unsigned int', 'microsecond'),
                   # tzinfo)
                   ],
        const=True)

    akw.Method(
        cls=c,
        name='isoformat',
        return_type='std::string',
        const=True);

    akw.Method(
        cls=c,
        name='strftime',
        return_type='std::wstring',
        signature=[('std::wstring', 'fmt')],
        const=True);

# time.strftime(format)
# Return a string representing the time, controlled by an explicit format string. See section strftime() Behavior.
# time.utcoffset()
# If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(None), and raises an exception if the latter doesn't return None or a timedelta object representing a whole number of minutes with magnitude less than one day.
# time.dst()
# If tzinfo is None, returns None, else returns self.tzinfo.dst(None), and raises an exception if the latter doesn't return None, or a timedelta object representing a whole number of minutes with magnitude less than one day.
# time.tzname()
# If tzinfo is None, returns None, else returns self.tzinfo.tzname(None), or raises an exception if the latter doesn't return None or a string object.
    
    return c
