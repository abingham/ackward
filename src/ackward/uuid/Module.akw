# -*- python -*-

import ackward as akw

def definition():
    m = akw.Module(name="uuid")

    # NOTE: This method fails mysteriously when not under the 
    # debugger. Why?
    akw.Function(
        mod=m,
        name='getnode',
        return_type='ackward::uuid::Node')

    # uuid.uuid1([node[, clock_seq]])
    # Generate a UUID from a host ID, sequence number, and the current
    # time. If node is not given, getnode() is used to obtain the
    # hardware address. If clock_seq is given, it is used as the
    # sequence number; otherwise a random 14-bit sequence number is
    # chosen.
    akw.Function(
        mod=m,
        name='uuid1',
        return_type='ackward::uuid::UUID')

    akw.Function(
        mod=m,
        name='uuid1',
        signature=[('ackward::uuid::Node', 'node')],
        return_type='ackward::uuid::UUID')

    akw.Function(
        mod=m,
        name='uuid1',
        signature=[('ackward::uuid::Node', 'node'),
                   ('unsigned int', 'clock_seq')],
        return_type='ackward::uuid::UUID')

    # uuid.uuid3(namespace, name)
    # Generate a UUID based on the MD5 hash of a namespace identifier
    # (which is a UUID) and a name (which is a string).
    akw.Function(
        mod=m,
        name='uuid3',
        signature=[('ackward::uuid::UUID', 'name_space'),
                   ('std::string', 'name')],
        return_type='ackward::uuid::UUID')

    # uuid.uuid4()
    # Generate a random UUID.
    akw.Function(
        mod=m,
        name='uuid4',
        return_type='ackward::uuid::UUID')

    akw.Function(
        mod=m,
        name='uuid5',
        signature=[('ackward::uuid::UUID', 'name_space'),
                   ('std::string', 'name')],
        return_type='ackward::uuid::UUID')

    # The uuid module defines the following namespace identifiers for
    # use with uuid3() or uuid5().

    # uuid.NAMESPACE_DNS
    # When this namespace is specified, the name string is a
    # fully-qualified domain name.
    for ns in ['DNS', 'URL', 'OID', 'X500']:
        akw.ModuleProperty(
            mod=m,
            name='NAMESPACE_%s' % ns,
            type='ackward::uuid::UUID')

    # uuid.NAMESPACE_URL
    # When this namespace is specified, the name string is a URL.
    # akw.ModuleProperty(
    #     mod=m,
    #     name='NAMESPACE_DNS',
    #     type='ackward::uuid::UUID')

# uuid.NAMESPACE_OID
# When this namespace is specified, the name string is an ISO OID.

# uuid.NAMESPACE_X500
# When this namespace is specified, the name string is an X.500 DN in DER or a text output format.

    return m
